AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Name:
    Type: String
    Default: use-lambda-proxy-integration-demo

Resources:
    ##   #####  #     ####    ##   ##### ###### #    #   ##   #   #
   #  #  #    # #    #    #  #  #    #   #      #    #  #  #   # #
  #    # #    # #    #      #    #   #   #####  #    # #    #   #
  ###### #####  #    #  ### ######   #   #      # ## # ######   #
  #    # #      #    #    # #    #   #   #      ##  ## #    #   #
  #    # #      #     ####  #    #   #   ###### #    # #    #   #
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref Name
  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      HttpMethod: POST
      ResourceId: !Ref RootResource
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        IntegrationHttpMethod: POST
  WithRequestPathMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      HttpMethod: POST
      ResourceId: !Ref WithRequestPathResource
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        IntegrationHttpMethod: POST
  RootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'example'
  WithRequestPathResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref RootResource
      PathPart: '{val}'
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
    DependsOn:
    - RootMethod
    - WithRequestPathMethod
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: v1

  #        ##   #    # #####  #####    ##
  #       #  #  ##  ## #    # #    #  #  #
  #      #    # # ## # #####  #    # #    #
  #      ###### #    # #    # #    # ######
  #      #    # #    # #    # #    # #    #
  ###### #    # #    # #####  #####  #    #
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          # coding: utf-8
          import json
          def handler(event, context):
            print(json.dumps(event))
            try:
              if event.get("body") is not None:
                print(json.dumps(json.loads(event.get("body"))))
              return { "statusCode": 200, "body": json.dumps(event) }
            except Exception as e:
              return { "statusCode": 500, "body": json.dumps({ "message": str(e) }) }
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
  RootMethodPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/example"
  WithRequestPathMethodPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/example/{val}"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
